// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `google/protobuf/type.proto`

///  A protocol buffer message type.
// @@protoc_insertion_point(message:google.protobuf.Type)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Type {
    // message fields
    ///  The fully qualified message name.
    // @@protoc_insertion_point(field:google.protobuf.Type.name)
    pub name: ::std::string::String,
    ///  The list of fields.
    // @@protoc_insertion_point(field:google.protobuf.Type.fields)
    pub fields: ::std::vec::Vec<Field>,
    ///  The list of types appearing in `oneof` definitions in this type.
    // @@protoc_insertion_point(field:google.protobuf.Type.oneofs)
    pub oneofs: ::std::vec::Vec<::std::string::String>,
    ///  The protocol buffer options.
    // @@protoc_insertion_point(field:google.protobuf.Type.options)
    pub options: ::std::vec::Vec<Option>,
    ///  The source context.
    // @@protoc_insertion_point(field:google.protobuf.Type.source_context)
    pub source_context: crate::MessageField<crate::well_known_types::source_context::SourceContext>,
    ///  The source syntax.
    // @@protoc_insertion_point(field:google.protobuf.Type.syntax)
    pub syntax: crate::EnumOrUnknown<Syntax>,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.Type.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Type {
    fn default() -> &'a Type {
        <Type as crate::Message>::default_instance()
    }
}

impl Type {
    pub fn new() -> Type {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Type| { &m.name },
            |m: &mut Type| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &Type| { &m.fields },
            |m: &mut Type| { &mut m.fields },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "oneofs",
            |m: &Type| { &m.oneofs },
            |m: &mut Type| { &mut m.oneofs },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Type| { &m.options },
            |m: &mut Type| { &mut m.options },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, crate::well_known_types::source_context::SourceContext>(
            "source_context",
            |m: &Type| { &m.source_context },
            |m: &mut Type| { &mut m.source_context },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "syntax",
            |m: &Type| { &m.syntax },
            |m: &mut Type| { &mut m.syntax },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Type>(
            "Type",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for Type {
    const NAME: &'static str = "Type";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.fields.push(is.read_message()?);
                },
                26 => {
                    self.oneofs.push(is.read_string()?);
                },
                34 => {
                    self.options.push(is.read_message()?);
                },
                42 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.source_context)?;
                },
                48 => {
                    self.syntax = is.read_enum_or_unknown()?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.oneofs {
            my_size += crate::rt::string_size(3, &value);
        };
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.source_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if self.syntax != crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2) {
            my_size += crate::rt::int32_size(6, self.syntax.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.fields {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.oneofs {
            os.write_string(3, &v)?;
        };
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.source_context.as_ref() {
            crate::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if self.syntax != crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2) {
            os.write_enum(6, crate::EnumOrUnknown::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Type {
        Type::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.fields.clear();
        self.oneofs.clear();
        self.options.clear();
        self.source_context.clear();
        self.syntax = crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Type {
        static instance: Type = Type {
            name: ::std::string::String::new(),
            fields: ::std::vec::Vec::new(),
            oneofs: ::std::vec::Vec::new(),
            options: ::std::vec::Vec::new(),
            source_context: crate::MessageField::none(),
            syntax: crate::EnumOrUnknown::from_i32(0),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for Type {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Type").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Type {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Type {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A single field of a message type.
// @@protoc_insertion_point(message:google.protobuf.Field)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Field {
    // message fields
    ///  The field type.
    // @@protoc_insertion_point(field:google.protobuf.Field.kind)
    pub kind: crate::EnumOrUnknown<field::Kind>,
    ///  The field cardinality.
    // @@protoc_insertion_point(field:google.protobuf.Field.cardinality)
    pub cardinality: crate::EnumOrUnknown<field::Cardinality>,
    ///  The field number.
    // @@protoc_insertion_point(field:google.protobuf.Field.number)
    pub number: i32,
    ///  The field name.
    // @@protoc_insertion_point(field:google.protobuf.Field.name)
    pub name: ::std::string::String,
    ///  The field type URL, without the scheme, for message or enumeration
    ///  types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
    // @@protoc_insertion_point(field:google.protobuf.Field.type_url)
    pub type_url: ::std::string::String,
    ///  The index of the field type in `Type.oneofs`, for message or enumeration
    ///  types. The first type has index 1; zero means the type is not in the list.
    // @@protoc_insertion_point(field:google.protobuf.Field.oneof_index)
    pub oneof_index: i32,
    ///  Whether to use alternative packed wire representation.
    // @@protoc_insertion_point(field:google.protobuf.Field.packed)
    pub packed: bool,
    ///  The protocol buffer options.
    // @@protoc_insertion_point(field:google.protobuf.Field.options)
    pub options: ::std::vec::Vec<Option>,
    ///  The field JSON name.
    // @@protoc_insertion_point(field:google.protobuf.Field.json_name)
    pub json_name: ::std::string::String,
    ///  The string value of the default value of this field. Proto2 syntax only.
    // @@protoc_insertion_point(field:google.protobuf.Field.default_value)
    pub default_value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.Field.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as crate::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "kind",
            |m: &Field| { &m.kind },
            |m: &mut Field| { &mut m.kind },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cardinality",
            |m: &Field| { &m.cardinality },
            |m: &mut Field| { &mut m.cardinality },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &Field| { &m.number },
            |m: &mut Field| { &mut m.number },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Field| { &m.name },
            |m: &mut Field| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type_url",
            |m: &Field| { &m.type_url },
            |m: &mut Field| { &mut m.type_url },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "oneof_index",
            |m: &Field| { &m.oneof_index },
            |m: &mut Field| { &mut m.oneof_index },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "packed",
            |m: &Field| { &m.packed },
            |m: &mut Field| { &mut m.packed },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Field| { &m.options },
            |m: &mut Field| { &mut m.options },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "json_name",
            |m: &Field| { &m.json_name },
            |m: &mut Field| { &mut m.json_name },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_value",
            |m: &Field| { &m.default_value },
            |m: &mut Field| { &mut m.default_value },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
            "Field",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for Field {
    const NAME: &'static str = "Field";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.kind = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.cardinality = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.number = is.read_int32()?;
                },
                34 => {
                    self.name = is.read_string()?;
                },
                50 => {
                    self.type_url = is.read_string()?;
                },
                56 => {
                    self.oneof_index = is.read_int32()?;
                },
                64 => {
                    self.packed = is.read_bool()?;
                },
                74 => {
                    self.options.push(is.read_message()?);
                },
                82 => {
                    self.json_name = is.read_string()?;
                },
                90 => {
                    self.default_value = is.read_string()?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.kind != crate::EnumOrUnknown::new(field::Kind::TYPE_UNKNOWN) {
            my_size += crate::rt::int32_size(1, self.kind.value());
        }
        if self.cardinality != crate::EnumOrUnknown::new(field::Cardinality::CARDINALITY_UNKNOWN) {
            my_size += crate::rt::int32_size(2, self.cardinality.value());
        }
        if self.number != 0 {
            my_size += crate::rt::int32_size(3, self.number);
        }
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(4, &self.name);
        }
        if !self.type_url.is_empty() {
            my_size += crate::rt::string_size(6, &self.type_url);
        }
        if self.oneof_index != 0 {
            my_size += crate::rt::int32_size(7, self.oneof_index);
        }
        if self.packed != false {
            my_size += 1 + 1;
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.json_name.is_empty() {
            my_size += crate::rt::string_size(10, &self.json_name);
        }
        if !self.default_value.is_empty() {
            my_size += crate::rt::string_size(11, &self.default_value);
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if self.kind != crate::EnumOrUnknown::new(field::Kind::TYPE_UNKNOWN) {
            os.write_enum(1, crate::EnumOrUnknown::value(&self.kind))?;
        }
        if self.cardinality != crate::EnumOrUnknown::new(field::Cardinality::CARDINALITY_UNKNOWN) {
            os.write_enum(2, crate::EnumOrUnknown::value(&self.cardinality))?;
        }
        if self.number != 0 {
            os.write_int32(3, self.number)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self.type_url.is_empty() {
            os.write_string(6, &self.type_url)?;
        }
        if self.oneof_index != 0 {
            os.write_int32(7, self.oneof_index)?;
        }
        if self.packed != false {
            os.write_bool(8, self.packed)?;
        }
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if !self.json_name.is_empty() {
            os.write_string(10, &self.json_name)?;
        }
        if !self.default_value.is_empty() {
            os.write_string(11, &self.default_value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Field {
        Field::new()
    }

    fn clear(&mut self) {
        self.kind = crate::EnumOrUnknown::new(field::Kind::TYPE_UNKNOWN);
        self.cardinality = crate::EnumOrUnknown::new(field::Cardinality::CARDINALITY_UNKNOWN);
        self.number = 0;
        self.name.clear();
        self.type_url.clear();
        self.oneof_index = 0;
        self.packed = false;
        self.options.clear();
        self.json_name.clear();
        self.default_value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Field {
        static instance: Field = Field {
            kind: crate::EnumOrUnknown::from_i32(0),
            cardinality: crate::EnumOrUnknown::from_i32(0),
            number: 0,
            name: ::std::string::String::new(),
            type_url: ::std::string::String::new(),
            oneof_index: 0,
            packed: false,
            options: ::std::vec::Vec::new(),
            json_name: ::std::string::String::new(),
            default_value: ::std::string::String::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for Field {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Field").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Field {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Field`
pub mod field {
    ///  Basic field types.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.protobuf.Field.Kind)
    pub enum Kind {
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_UNKNOWN)
        TYPE_UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_DOUBLE)
        TYPE_DOUBLE = 1,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_FLOAT)
        TYPE_FLOAT = 2,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_INT64)
        TYPE_INT64 = 3,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_UINT64)
        TYPE_UINT64 = 4,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_INT32)
        TYPE_INT32 = 5,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_FIXED64)
        TYPE_FIXED64 = 6,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_FIXED32)
        TYPE_FIXED32 = 7,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_BOOL)
        TYPE_BOOL = 8,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_STRING)
        TYPE_STRING = 9,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_GROUP)
        TYPE_GROUP = 10,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_MESSAGE)
        TYPE_MESSAGE = 11,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_BYTES)
        TYPE_BYTES = 12,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_UINT32)
        TYPE_UINT32 = 13,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_ENUM)
        TYPE_ENUM = 14,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_SFIXED32)
        TYPE_SFIXED32 = 15,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_SFIXED64)
        TYPE_SFIXED64 = 16,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_SINT32)
        TYPE_SINT32 = 17,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Kind.TYPE_SINT64)
        TYPE_SINT64 = 18,
    }

    impl crate::Enum for Kind {
        const NAME: &'static str = "Kind";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Kind> {
            match value {
                0 => ::std::option::Option::Some(Kind::TYPE_UNKNOWN),
                1 => ::std::option::Option::Some(Kind::TYPE_DOUBLE),
                2 => ::std::option::Option::Some(Kind::TYPE_FLOAT),
                3 => ::std::option::Option::Some(Kind::TYPE_INT64),
                4 => ::std::option::Option::Some(Kind::TYPE_UINT64),
                5 => ::std::option::Option::Some(Kind::TYPE_INT32),
                6 => ::std::option::Option::Some(Kind::TYPE_FIXED64),
                7 => ::std::option::Option::Some(Kind::TYPE_FIXED32),
                8 => ::std::option::Option::Some(Kind::TYPE_BOOL),
                9 => ::std::option::Option::Some(Kind::TYPE_STRING),
                10 => ::std::option::Option::Some(Kind::TYPE_GROUP),
                11 => ::std::option::Option::Some(Kind::TYPE_MESSAGE),
                12 => ::std::option::Option::Some(Kind::TYPE_BYTES),
                13 => ::std::option::Option::Some(Kind::TYPE_UINT32),
                14 => ::std::option::Option::Some(Kind::TYPE_ENUM),
                15 => ::std::option::Option::Some(Kind::TYPE_SFIXED32),
                16 => ::std::option::Option::Some(Kind::TYPE_SFIXED64),
                17 => ::std::option::Option::Some(Kind::TYPE_SINT32),
                18 => ::std::option::Option::Some(Kind::TYPE_SINT64),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Kind> {
            match str {
                "TYPE_UNKNOWN" => ::std::option::Option::Some(Kind::TYPE_UNKNOWN),
                "TYPE_DOUBLE" => ::std::option::Option::Some(Kind::TYPE_DOUBLE),
                "TYPE_FLOAT" => ::std::option::Option::Some(Kind::TYPE_FLOAT),
                "TYPE_INT64" => ::std::option::Option::Some(Kind::TYPE_INT64),
                "TYPE_UINT64" => ::std::option::Option::Some(Kind::TYPE_UINT64),
                "TYPE_INT32" => ::std::option::Option::Some(Kind::TYPE_INT32),
                "TYPE_FIXED64" => ::std::option::Option::Some(Kind::TYPE_FIXED64),
                "TYPE_FIXED32" => ::std::option::Option::Some(Kind::TYPE_FIXED32),
                "TYPE_BOOL" => ::std::option::Option::Some(Kind::TYPE_BOOL),
                "TYPE_STRING" => ::std::option::Option::Some(Kind::TYPE_STRING),
                "TYPE_GROUP" => ::std::option::Option::Some(Kind::TYPE_GROUP),
                "TYPE_MESSAGE" => ::std::option::Option::Some(Kind::TYPE_MESSAGE),
                "TYPE_BYTES" => ::std::option::Option::Some(Kind::TYPE_BYTES),
                "TYPE_UINT32" => ::std::option::Option::Some(Kind::TYPE_UINT32),
                "TYPE_ENUM" => ::std::option::Option::Some(Kind::TYPE_ENUM),
                "TYPE_SFIXED32" => ::std::option::Option::Some(Kind::TYPE_SFIXED32),
                "TYPE_SFIXED64" => ::std::option::Option::Some(Kind::TYPE_SFIXED64),
                "TYPE_SINT32" => ::std::option::Option::Some(Kind::TYPE_SINT32),
                "TYPE_SINT64" => ::std::option::Option::Some(Kind::TYPE_SINT64),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Kind] = &[
            Kind::TYPE_UNKNOWN,
            Kind::TYPE_DOUBLE,
            Kind::TYPE_FLOAT,
            Kind::TYPE_INT64,
            Kind::TYPE_UINT64,
            Kind::TYPE_INT32,
            Kind::TYPE_FIXED64,
            Kind::TYPE_FIXED32,
            Kind::TYPE_BOOL,
            Kind::TYPE_STRING,
            Kind::TYPE_GROUP,
            Kind::TYPE_MESSAGE,
            Kind::TYPE_BYTES,
            Kind::TYPE_UINT32,
            Kind::TYPE_ENUM,
            Kind::TYPE_SFIXED32,
            Kind::TYPE_SFIXED64,
            Kind::TYPE_SINT32,
            Kind::TYPE_SINT64,
        ];
    }

    impl crate::EnumFull for Kind {
        fn enum_descriptor() -> crate::reflect::EnumDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Field.Kind").unwrap()).clone()
        }

        fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Kind {
        fn default() -> Self {
            Kind::TYPE_UNKNOWN
        }
    }

    impl Kind {
        pub(in super) fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
            crate::reflect::GeneratedEnumDescriptorData::new::<Kind>("Field.Kind")
        }
    }

    ///  Whether a field is optional, required, or repeated.
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:google.protobuf.Field.Cardinality)
    pub enum Cardinality {
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Cardinality.CARDINALITY_UNKNOWN)
        CARDINALITY_UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Cardinality.CARDINALITY_OPTIONAL)
        CARDINALITY_OPTIONAL = 1,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Cardinality.CARDINALITY_REQUIRED)
        CARDINALITY_REQUIRED = 2,
        // @@protoc_insertion_point(enum_value:google.protobuf.Field.Cardinality.CARDINALITY_REPEATED)
        CARDINALITY_REPEATED = 3,
    }

    impl crate::Enum for Cardinality {
        const NAME: &'static str = "Cardinality";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Cardinality> {
            match value {
                0 => ::std::option::Option::Some(Cardinality::CARDINALITY_UNKNOWN),
                1 => ::std::option::Option::Some(Cardinality::CARDINALITY_OPTIONAL),
                2 => ::std::option::Option::Some(Cardinality::CARDINALITY_REQUIRED),
                3 => ::std::option::Option::Some(Cardinality::CARDINALITY_REPEATED),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Cardinality> {
            match str {
                "CARDINALITY_UNKNOWN" => ::std::option::Option::Some(Cardinality::CARDINALITY_UNKNOWN),
                "CARDINALITY_OPTIONAL" => ::std::option::Option::Some(Cardinality::CARDINALITY_OPTIONAL),
                "CARDINALITY_REQUIRED" => ::std::option::Option::Some(Cardinality::CARDINALITY_REQUIRED),
                "CARDINALITY_REPEATED" => ::std::option::Option::Some(Cardinality::CARDINALITY_REPEATED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Cardinality] = &[
            Cardinality::CARDINALITY_UNKNOWN,
            Cardinality::CARDINALITY_OPTIONAL,
            Cardinality::CARDINALITY_REQUIRED,
            Cardinality::CARDINALITY_REPEATED,
        ];
    }

    impl crate::EnumFull for Cardinality {
        fn enum_descriptor() -> crate::reflect::EnumDescriptor {
            static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Field.Cardinality").unwrap()).clone()
        }

        fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Cardinality {
        fn default() -> Self {
            Cardinality::CARDINALITY_UNKNOWN
        }
    }

    impl Cardinality {
        pub(in super) fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
            crate::reflect::GeneratedEnumDescriptorData::new::<Cardinality>("Field.Cardinality")
        }
    }
}

///  Enum type definition.
// @@protoc_insertion_point(message:google.protobuf.Enum)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Enum {
    // message fields
    ///  Enum type name.
    // @@protoc_insertion_point(field:google.protobuf.Enum.name)
    pub name: ::std::string::String,
    ///  Enum value definitions.
    // @@protoc_insertion_point(field:google.protobuf.Enum.enumvalue)
    pub enumvalue: ::std::vec::Vec<EnumValue>,
    ///  Protocol buffer options.
    // @@protoc_insertion_point(field:google.protobuf.Enum.options)
    pub options: ::std::vec::Vec<Option>,
    ///  The source context.
    // @@protoc_insertion_point(field:google.protobuf.Enum.source_context)
    pub source_context: crate::MessageField<crate::well_known_types::source_context::SourceContext>,
    ///  The source syntax.
    // @@protoc_insertion_point(field:google.protobuf.Enum.syntax)
    pub syntax: crate::EnumOrUnknown<Syntax>,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.Enum.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Enum {
    fn default() -> &'a Enum {
        <Enum as crate::Message>::default_instance()
    }
}

impl Enum {
    pub fn new() -> Enum {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Enum| { &m.name },
            |m: &mut Enum| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "enumvalue",
            |m: &Enum| { &m.enumvalue },
            |m: &mut Enum| { &mut m.enumvalue },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &Enum| { &m.options },
            |m: &mut Enum| { &mut m.options },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, crate::well_known_types::source_context::SourceContext>(
            "source_context",
            |m: &Enum| { &m.source_context },
            |m: &mut Enum| { &mut m.source_context },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "syntax",
            |m: &Enum| { &m.syntax },
            |m: &mut Enum| { &mut m.syntax },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Enum>(
            "Enum",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for Enum {
    const NAME: &'static str = "Enum";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.enumvalue.push(is.read_message()?);
                },
                26 => {
                    self.options.push(is.read_message()?);
                },
                34 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.source_context)?;
                },
                40 => {
                    self.syntax = is.read_enum_or_unknown()?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        for value in &self.enumvalue {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.source_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        if self.syntax != crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2) {
            my_size += crate::rt::int32_size(5, self.syntax.value());
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.enumvalue {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.source_context.as_ref() {
            crate::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.syntax != crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2) {
            os.write_enum(5, crate::EnumOrUnknown::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Enum {
        Enum::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.enumvalue.clear();
        self.options.clear();
        self.source_context.clear();
        self.syntax = crate::EnumOrUnknown::new(Syntax::SYNTAX_PROTO2);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Enum {
        static instance: Enum = Enum {
            name: ::std::string::String::new(),
            enumvalue: ::std::vec::Vec::new(),
            options: ::std::vec::Vec::new(),
            source_context: crate::MessageField::none(),
            syntax: crate::EnumOrUnknown::from_i32(0),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for Enum {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Enum").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Enum {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Enum {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Enum value definition.
// @@protoc_insertion_point(message:google.protobuf.EnumValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EnumValue {
    // message fields
    ///  Enum value name.
    // @@protoc_insertion_point(field:google.protobuf.EnumValue.name)
    pub name: ::std::string::String,
    ///  Enum value number.
    // @@protoc_insertion_point(field:google.protobuf.EnumValue.number)
    pub number: i32,
    ///  Protocol buffer options.
    // @@protoc_insertion_point(field:google.protobuf.EnumValue.options)
    pub options: ::std::vec::Vec<Option>,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.EnumValue.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnumValue {
    fn default() -> &'a EnumValue {
        <EnumValue as crate::Message>::default_instance()
    }
}

impl EnumValue {
    pub fn new() -> EnumValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &EnumValue| { &m.name },
            |m: &mut EnumValue| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &EnumValue| { &m.number },
            |m: &mut EnumValue| { &mut m.number },
        ));
        fields.push(crate::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &EnumValue| { &m.options },
            |m: &mut EnumValue| { &mut m.options },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<EnumValue>(
            "EnumValue",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for EnumValue {
    const NAME: &'static str = "EnumValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.number = is.read_int32()?;
                },
                26 => {
                    self.options.push(is.read_message()?);
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if self.number != 0 {
            my_size += crate::rt::int32_size(2, self.number);
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.number != 0 {
            os.write_int32(2, self.number)?;
        }
        for v in &self.options {
            crate::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnumValue {
        EnumValue::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.number = 0;
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnumValue {
        static instance: EnumValue = EnumValue {
            name: ::std::string::String::new(),
            number: 0,
            options: ::std::vec::Vec::new(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for EnumValue {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnumValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnumValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for EnumValue {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A protocol buffer option, which can be attached to a message, field,
///  enumeration, etc.
// @@protoc_insertion_point(message:google.protobuf.Option)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Option {
    // message fields
    ///  The option's name. For protobuf built-in options (options defined in
    ///  descriptor.proto), this is the short name. For example, `"map_entry"`.
    ///  For custom options, it should be the fully-qualified name. For example,
    ///  `"google.api.http"`.
    // @@protoc_insertion_point(field:google.protobuf.Option.name)
    pub name: ::std::string::String,
    ///  The option's value packed in an Any message. If the value is a primitive,
    ///  the corresponding wrapper type defined in google/protobuf/wrappers.proto
    ///  should be used. If the value is an enum, it should be stored as an int32
    ///  value using the google.protobuf.Int32Value type.
    // @@protoc_insertion_point(field:google.protobuf.Option.value)
    pub value: crate::MessageField<crate::well_known_types::any::Any>,
    // special fields
    // @@protoc_insertion_point(special_field:google.protobuf.Option.special_fields)
    pub special_fields: crate::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Option {
    fn default() -> &'a Option {
        <Option as crate::Message>::default_instance()
    }
}

impl Option {
    pub fn new() -> Option {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> crate::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(crate::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Option| { &m.name },
            |m: &mut Option| { &mut m.name },
        ));
        fields.push(crate::reflect::rt::v2::make_message_field_accessor::<_, crate::well_known_types::any::Any>(
            "value",
            |m: &Option| { &m.value },
            |m: &mut Option| { &mut m.value },
        ));
        crate::reflect::GeneratedMessageDescriptorData::new_2::<Option>(
            "Option",
            fields,
            oneofs,
        )
    }
}

impl crate::Message for Option {
    const NAME: &'static str = "Option";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    crate::rt::read_singular_message_into_field(is, &mut self.value)?;
                },
                tag => {
                    crate::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += crate::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.value.as_ref() {
            crate::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &crate::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut crate::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Option {
        Option::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Option {
        static instance: Option = Option {
            name: ::std::string::String::new(),
            value: crate::MessageField::none(),
            special_fields: crate::SpecialFields::new(),
        };
        &instance
    }
}

impl crate::MessageFull for Option {
    fn descriptor() -> crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::MessageDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Option").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Option {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Option {
    type RuntimeType = crate::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The syntax in which a protocol buffer element is defined.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:google.protobuf.Syntax)
pub enum Syntax {
    // @@protoc_insertion_point(enum_value:google.protobuf.Syntax.SYNTAX_PROTO2)
    SYNTAX_PROTO2 = 0,
    // @@protoc_insertion_point(enum_value:google.protobuf.Syntax.SYNTAX_PROTO3)
    SYNTAX_PROTO3 = 1,
}

impl crate::Enum for Syntax {
    const NAME: &'static str = "Syntax";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Syntax> {
        match value {
            0 => ::std::option::Option::Some(Syntax::SYNTAX_PROTO2),
            1 => ::std::option::Option::Some(Syntax::SYNTAX_PROTO3),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Syntax> {
        match str {
            "SYNTAX_PROTO2" => ::std::option::Option::Some(Syntax::SYNTAX_PROTO2),
            "SYNTAX_PROTO3" => ::std::option::Option::Some(Syntax::SYNTAX_PROTO3),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Syntax] = &[
        Syntax::SYNTAX_PROTO2,
        Syntax::SYNTAX_PROTO3,
    ];
}

impl crate::EnumFull for Syntax {
    fn enum_descriptor() -> crate::reflect::EnumDescriptor {
        static descriptor: crate::rt::Lazy<crate::reflect::EnumDescriptor> = crate::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Syntax").unwrap()).clone()
    }

    fn descriptor(&self) -> crate::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Syntax {
    fn default() -> Self {
        Syntax::SYNTAX_PROTO2
    }
}

impl Syntax {
    fn generated_enum_descriptor_data() -> crate::reflect::GeneratedEnumDescriptorData {
        crate::reflect::GeneratedEnumDescriptorData::new::<Syntax>("Syntax")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1agoogle/protobuf/type.proto\x12\x0fgoogle.protobuf\x1a\x19google/pr\
    otobuf/any.proto\x1a$google/protobuf/source_context.proto\"\x8d\x02\n\
    \x04Type\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12.\n\x06fields\
    \x18\x02\x20\x03(\x0b2\x16.google.protobuf.FieldR\x06fields\x12\x16\n\
    \x06oneofs\x18\x03\x20\x03(\tR\x06oneofs\x121\n\x07options\x18\x04\x20\
    \x03(\x0b2\x17.google.protobuf.OptionR\x07options\x12E\n\x0esource_conte\
    xt\x18\x05\x20\x01(\x0b2\x1e.google.protobuf.SourceContextR\rsourceConte\
    xt\x12/\n\x06syntax\x18\x06\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\
    \x06syntax\"\xb4\x06\n\x05Field\x12/\n\x04kind\x18\x01\x20\x01(\x0e2\x1b\
    .google.protobuf.Field.KindR\x04kind\x12D\n\x0bcardinality\x18\x02\x20\
    \x01(\x0e2\".google.protobuf.Field.CardinalityR\x0bcardinality\x12\x16\n\
    \x06number\x18\x03\x20\x01(\x05R\x06number\x12\x12\n\x04name\x18\x04\x20\
    \x01(\tR\x04name\x12\x19\n\x08type_url\x18\x06\x20\x01(\tR\x07typeUrl\
    \x12\x1f\n\x0boneof_index\x18\x07\x20\x01(\x05R\noneofIndex\x12\x16\n\
    \x06packed\x18\x08\x20\x01(\x08R\x06packed\x121\n\x07options\x18\t\x20\
    \x03(\x0b2\x17.google.protobuf.OptionR\x07options\x12\x1b\n\tjson_name\
    \x18\n\x20\x01(\tR\x08jsonName\x12#\n\rdefault_value\x18\x0b\x20\x01(\tR\
    \x0cdefaultValue\"\xc8\x02\n\x04Kind\x12\x10\n\x0cTYPE_UNKNOWN\x10\0\x12\
    \x0f\n\x0bTYPE_DOUBLE\x10\x01\x12\x0e\n\nTYPE_FLOAT\x10\x02\x12\x0e\n\nT\
    YPE_INT64\x10\x03\x12\x0f\n\x0bTYPE_UINT64\x10\x04\x12\x0e\n\nTYPE_INT32\
    \x10\x05\x12\x10\n\x0cTYPE_FIXED64\x10\x06\x12\x10\n\x0cTYPE_FIXED32\x10\
    \x07\x12\r\n\tTYPE_BOOL\x10\x08\x12\x0f\n\x0bTYPE_STRING\x10\t\x12\x0e\n\
    \nTYPE_GROUP\x10\n\x12\x10\n\x0cTYPE_MESSAGE\x10\x0b\x12\x0e\n\nTYPE_BYT\
    ES\x10\x0c\x12\x0f\n\x0bTYPE_UINT32\x10\r\x12\r\n\tTYPE_ENUM\x10\x0e\x12\
    \x11\n\rTYPE_SFIXED32\x10\x0f\x12\x11\n\rTYPE_SFIXED64\x10\x10\x12\x0f\n\
    \x0bTYPE_SINT32\x10\x11\x12\x0f\n\x0bTYPE_SINT64\x10\x12\"t\n\x0bCardina\
    lity\x12\x17\n\x13CARDINALITY_UNKNOWN\x10\0\x12\x18\n\x14CARDINALITY_OPT\
    IONAL\x10\x01\x12\x18\n\x14CARDINALITY_REQUIRED\x10\x02\x12\x18\n\x14CAR\
    DINALITY_REPEATED\x10\x03\"\xff\x01\n\x04Enum\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x128\n\tenumvalue\x18\x02\x20\x03(\x0b2\x1a.google.\
    protobuf.EnumValueR\tenumvalue\x121\n\x07options\x18\x03\x20\x03(\x0b2\
    \x17.google.protobuf.OptionR\x07options\x12E\n\x0esource_context\x18\x04\
    \x20\x01(\x0b2\x1e.google.protobuf.SourceContextR\rsourceContext\x12/\n\
    \x06syntax\x18\x05\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\x06syntax\"\
    j\n\tEnumValue\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x16\n\
    \x06number\x18\x02\x20\x01(\x05R\x06number\x121\n\x07options\x18\x03\x20\
    \x03(\x0b2\x17.google.protobuf.OptionR\x07options\"H\n\x06Option\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12*\n\x05value\x18\x02\x20\x01(\
    \x0b2\x14.google.protobuf.AnyR\x05value*.\n\x06Syntax\x12\x11\n\rSYNTAX_\
    PROTO2\x10\0\x12\x11\n\rSYNTAX_PROTO3\x10\x01B{\n\x13com.google.protobuf\
    B\tTypeProtoP\x01Z-google.golang.org/protobuf/types/known/typepb\xf8\x01\
    \x01\xa2\x02\x03GPB\xaa\x02\x1eGoogle.Protobuf.WellKnownTypesJ\xc38\n\
    \x07\x12\x05\x1e\0\xba\x01\x01\n\xcc\x0c\n\x01\x0c\x12\x03\x1e\0\x122\
    \xc1\x0c\x20Protocol\x20Buffers\x20-\x20Google's\x20data\x20interchange\
    \x20format\n\x20Copyright\x202008\x20Google\x20Inc.\x20\x20All\x20rights\
    \x20reserved.\n\x20https://developers.google.com/protocol-buffers/\n\n\
    \x20Redistribution\x20and\x20use\x20in\x20source\x20and\x20binary\x20for\
    ms,\x20with\x20or\x20without\n\x20modification,\x20are\x20permitted\x20p\
    rovided\x20that\x20the\x20following\x20conditions\x20are\n\x20met:\n\n\
    \x20\x20\x20\x20\x20*\x20Redistributions\x20of\x20source\x20code\x20must\
    \x20retain\x20the\x20above\x20copyright\n\x20notice,\x20this\x20list\x20\
    of\x20conditions\x20and\x20the\x20following\x20disclaimer.\n\x20\x20\x20\
    \x20\x20*\x20Redistributions\x20in\x20binary\x20form\x20must\x20reproduc\
    e\x20the\x20above\n\x20copyright\x20notice,\x20this\x20list\x20of\x20con\
    ditions\x20and\x20the\x20following\x20disclaimer\n\x20in\x20the\x20docum\
    entation\x20and/or\x20other\x20materials\x20provided\x20with\x20the\n\
    \x20distribution.\n\x20\x20\x20\x20\x20*\x20Neither\x20the\x20name\x20of\
    \x20Google\x20Inc.\x20nor\x20the\x20names\x20of\x20its\n\x20contributors\
    \x20may\x20be\x20used\x20to\x20endorse\x20or\x20promote\x20products\x20d\
    erived\x20from\n\x20this\x20software\x20without\x20specific\x20prior\x20\
    written\x20permission.\n\n\x20THIS\x20SOFTWARE\x20IS\x20PROVIDED\x20BY\
    \x20THE\x20COPYRIGHT\x20HOLDERS\x20AND\x20CONTRIBUTORS\n\x20\"AS\x20IS\"\
    \x20AND\x20ANY\x20EXPRESS\x20OR\x20IMPLIED\x20WARRANTIES,\x20INCLUDING,\
    \x20BUT\x20NOT\n\x20LIMITED\x20TO,\x20THE\x20IMPLIED\x20WARRANTIES\x20OF\
    \x20MERCHANTABILITY\x20AND\x20FITNESS\x20FOR\n\x20A\x20PARTICULAR\x20PUR\
    POSE\x20ARE\x20DISCLAIMED.\x20IN\x20NO\x20EVENT\x20SHALL\x20THE\x20COPYR\
    IGHT\n\x20OWNER\x20OR\x20CONTRIBUTORS\x20BE\x20LIABLE\x20FOR\x20ANY\x20D\
    IRECT,\x20INDIRECT,\x20INCIDENTAL,\n\x20SPECIAL,\x20EXEMPLARY,\x20OR\x20\
    CONSEQUENTIAL\x20DAMAGES\x20(INCLUDING,\x20BUT\x20NOT\n\x20LIMITED\x20TO\
    ,\x20PROCUREMENT\x20OF\x20SUBSTITUTE\x20GOODS\x20OR\x20SERVICES;\x20LOSS\
    \x20OF\x20USE,\n\x20DATA,\x20OR\x20PROFITS;\x20OR\x20BUSINESS\x20INTERRU\
    PTION)\x20HOWEVER\x20CAUSED\x20AND\x20ON\x20ANY\n\x20THEORY\x20OF\x20LIA\
    BILITY,\x20WHETHER\x20IN\x20CONTRACT,\x20STRICT\x20LIABILITY,\x20OR\x20T\
    ORT\n\x20(INCLUDING\x20NEGLIGENCE\x20OR\x20OTHERWISE)\x20ARISING\x20IN\
    \x20ANY\x20WAY\x20OUT\x20OF\x20THE\x20USE\n\x20OF\x20THIS\x20SOFTWARE,\
    \x20EVEN\x20IF\x20ADVISED\x20OF\x20THE\x20POSSIBILITY\x20OF\x20SUCH\x20D\
    AMAGE.\n\n\x08\n\x01\x02\x12\x03\x20\0\x18\n\t\n\x02\x03\0\x12\x03\"\0#\
    \n\t\n\x02\x03\x01\x12\x03#\0.\n\x08\n\x01\x08\x12\x03%\0;\n\t\n\x02\x08\
    %\x12\x03%\0;\n\x08\n\x01\x08\x12\x03&\0\x1f\n\t\n\x02\x08\x1f\x12\x03&\
    \0\x1f\n\x08\n\x01\x08\x12\x03'\0,\n\t\n\x02\x08\x01\x12\x03'\0,\n\x08\n\
    \x01\x08\x12\x03(\0*\n\t\n\x02\x08\x08\x12\x03(\0*\n\x08\n\x01\x08\x12\
    \x03)\0\"\n\t\n\x02\x08\n\x12\x03)\0\"\n\x08\n\x01\x08\x12\x03*\0!\n\t\n\
    \x02\x08$\x12\x03*\0!\n\x08\n\x01\x08\x12\x03+\0D\n\t\n\x02\x08\x0b\x12\
    \x03+\0D\n-\n\x02\x04\0\x12\x04.\0;\x01\x1a!\x20A\x20protocol\x20buffer\
    \x20message\x20type.\n\n\n\n\x03\x04\0\x01\x12\x03.\x08\x0c\n0\n\x04\x04\
    \0\x02\0\x12\x030\x02\x12\x1a#\x20The\x20fully\x20qualified\x20message\
    \x20name.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x030\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x030\x10\x11\n\
    \"\n\x04\x04\0\x02\x01\x12\x032\x02\x1c\x1a\x15\x20The\x20list\x20of\x20\
    fields.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x032\x02\n\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x032\x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x032\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x032\x1a\x1b\nO\n\x04\x04\0\x02\
    \x02\x12\x034\x02\x1d\x1aB\x20The\x20list\x20of\x20types\x20appearing\
    \x20in\x20`oneof`\x20definitions\x20in\x20this\x20type.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x034\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x034\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x034\x12\x18\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x034\x1b\x1c\n+\n\x04\x04\0\x02\x03\x12\x036\x02\x1e\
    \x1a\x1e\x20The\x20protocol\x20buffer\x20options.\n\n\x0c\n\x05\x04\0\
    \x02\x03\x04\x12\x036\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x036\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x036\x12\x19\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x036\x1c\x1d\n\"\n\x04\x04\0\x02\x04\x12\x038\x02#\x1a\
    \x15\x20The\x20source\x20context.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x038\x02\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x038\x10\x1e\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x038!\"\n!\n\x04\x04\0\x02\x05\x12\x03:\x02\x14\
    \x1a\x14\x20The\x20source\x20syntax.\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\
    \x03:\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03:\t\x0f\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03:\x12\x13\n0\n\x02\x04\x01\x12\x05>\0\x8b\x01\
    \x01\x1a#\x20A\x20single\x20field\x20of\x20a\x20message\x20type.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03>\x08\r\n\"\n\x04\x04\x01\x04\0\x12\x04@\x02g\
    \x03\x1a\x14\x20Basic\x20field\x20types.\n\n\x0c\n\x05\x04\x01\x04\0\x01\
    \x12\x03@\x07\x0b\n$\n\x06\x04\x01\x04\0\x02\0\x12\x03B\x04\x15\x1a\x15\
    \x20Field\x20type\x20unknown.\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\
    \x03B\x04\x10\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03B\x13\x14\n#\n\
    \x06\x04\x01\x04\0\x02\x01\x12\x03D\x04\x14\x1a\x14\x20Field\x20type\x20\
    double.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03D\x04\x0f\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x01\x02\x12\x03D\x12\x13\n\"\n\x06\x04\x01\x04\0\
    \x02\x02\x12\x03F\x04\x13\x1a\x13\x20Field\x20type\x20float.\n\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x02\x01\x12\x03F\x04\x0e\n\x0e\n\x07\x04\x01\x04\
    \0\x02\x02\x02\x12\x03F\x11\x12\n\"\n\x06\x04\x01\x04\0\x02\x03\x12\x03H\
    \x04\x13\x1a\x13\x20Field\x20type\x20int64.\n\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x03\x01\x12\x03H\x04\x0e\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\
    \x03H\x11\x12\n#\n\x06\x04\x01\x04\0\x02\x04\x12\x03J\x04\x14\x1a\x14\
    \x20Field\x20type\x20uint64.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x04\x01\x12\
    \x03J\x04\x0f\n\x0e\n\x07\x04\x01\x04\0\x02\x04\x02\x12\x03J\x12\x13\n\"\
    \n\x06\x04\x01\x04\0\x02\x05\x12\x03L\x04\x13\x1a\x13\x20Field\x20type\
    \x20int32.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x05\x01\x12\x03L\x04\x0e\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x05\x02\x12\x03L\x11\x12\n$\n\x06\x04\x01\
    \x04\0\x02\x06\x12\x03N\x04\x15\x1a\x15\x20Field\x20type\x20fixed64.\n\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x06\x01\x12\x03N\x04\x10\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x06\x02\x12\x03N\x13\x14\n$\n\x06\x04\x01\x04\0\x02\x07\
    \x12\x03P\x04\x15\x1a\x15\x20Field\x20type\x20fixed32.\n\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x07\x01\x12\x03P\x04\x10\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x07\x02\x12\x03P\x13\x14\n!\n\x06\x04\x01\x04\0\x02\x08\x12\x03R\x04\
    \x12\x1a\x12\x20Field\x20type\x20bool.\n\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x08\x01\x12\x03R\x04\r\n\x0e\n\x07\x04\x01\x04\0\x02\x08\x02\x12\x03R\
    \x10\x11\n#\n\x06\x04\x01\x04\0\x02\t\x12\x03T\x04\x14\x1a\x14\x20Field\
    \x20type\x20string.\n\n\x0e\n\x07\x04\x01\x04\0\x02\t\x01\x12\x03T\x04\
    \x0f\n\x0e\n\x07\x04\x01\x04\0\x02\t\x02\x12\x03T\x12\x13\nF\n\x06\x04\
    \x01\x04\0\x02\n\x12\x03V\x04\x14\x1a7\x20Field\x20type\x20group.\x20Pro\
    to2\x20syntax\x20only,\x20and\x20deprecated.\n\n\x0e\n\x07\x04\x01\x04\0\
    \x02\n\x01\x12\x03V\x04\x0e\n\x0e\n\x07\x04\x01\x04\0\x02\n\x02\x12\x03V\
    \x11\x13\n$\n\x06\x04\x01\x04\0\x02\x0b\x12\x03X\x04\x16\x1a\x15\x20Fiel\
    d\x20type\x20message.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x0b\x01\x12\x03X\
    \x04\x10\n\x0e\n\x07\x04\x01\x04\0\x02\x0b\x02\x12\x03X\x13\x15\n\"\n\
    \x06\x04\x01\x04\0\x02\x0c\x12\x03Z\x04\x14\x1a\x13\x20Field\x20type\x20\
    bytes.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x0c\x01\x12\x03Z\x04\x0e\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x0c\x02\x12\x03Z\x11\x13\n#\n\x06\x04\x01\x04\0\
    \x02\r\x12\x03\\\x04\x15\x1a\x14\x20Field\x20type\x20uint32.\n\n\x0e\n\
    \x07\x04\x01\x04\0\x02\r\x01\x12\x03\\\x04\x0f\n\x0e\n\x07\x04\x01\x04\0\
    \x02\r\x02\x12\x03\\\x12\x14\n!\n\x06\x04\x01\x04\0\x02\x0e\x12\x03^\x04\
    \x13\x1a\x12\x20Field\x20type\x20enum.\n\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x0e\x01\x12\x03^\x04\r\n\x0e\n\x07\x04\x01\x04\0\x02\x0e\x02\x12\x03^\
    \x10\x12\n%\n\x06\x04\x01\x04\0\x02\x0f\x12\x03`\x04\x17\x1a\x16\x20Fiel\
    d\x20type\x20sfixed32.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x0f\x01\x12\x03`\
    \x04\x11\n\x0e\n\x07\x04\x01\x04\0\x02\x0f\x02\x12\x03`\x14\x16\n%\n\x06\
    \x04\x01\x04\0\x02\x10\x12\x03b\x04\x17\x1a\x16\x20Field\x20type\x20sfix\
    ed64.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x10\x01\x12\x03b\x04\x11\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x10\x02\x12\x03b\x14\x16\n#\n\x06\x04\x01\x04\0\
    \x02\x11\x12\x03d\x04\x15\x1a\x14\x20Field\x20type\x20sint32.\n\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x11\x01\x12\x03d\x04\x0f\n\x0e\n\x07\x04\x01\x04\
    \0\x02\x11\x02\x12\x03d\x12\x14\n#\n\x06\x04\x01\x04\0\x02\x12\x12\x03f\
    \x04\x15\x1a\x14\x20Field\x20type\x20sint64.\n\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x12\x01\x12\x03f\x04\x0f\n\x0e\n\x07\x04\x01\x04\0\x02\x12\x02\x12\
    \x03f\x12\x14\nC\n\x04\x04\x01\x04\x01\x12\x04j\x02s\x03\x1a5\x20Whether\
    \x20a\x20field\x20is\x20optional,\x20required,\x20or\x20repeated.\n\n\
    \x0c\n\x05\x04\x01\x04\x01\x01\x12\x03j\x07\x12\n5\n\x06\x04\x01\x04\x01\
    \x02\0\x12\x03l\x04\x1c\x1a&\x20For\x20fields\x20with\x20unknown\x20card\
    inality.\n\n\x0e\n\x07\x04\x01\x04\x01\x02\0\x01\x12\x03l\x04\x17\n\x0e\
    \n\x07\x04\x01\x04\x01\x02\0\x02\x12\x03l\x1a\x1b\n%\n\x06\x04\x01\x04\
    \x01\x02\x01\x12\x03n\x04\x1d\x1a\x16\x20For\x20optional\x20fields.\n\n\
    \x0e\n\x07\x04\x01\x04\x01\x02\x01\x01\x12\x03n\x04\x18\n\x0e\n\x07\x04\
    \x01\x04\x01\x02\x01\x02\x12\x03n\x1b\x1c\n9\n\x06\x04\x01\x04\x01\x02\
    \x02\x12\x03p\x04\x1d\x1a*\x20For\x20required\x20fields.\x20Proto2\x20sy\
    ntax\x20only.\n\n\x0e\n\x07\x04\x01\x04\x01\x02\x02\x01\x12\x03p\x04\x18\
    \n\x0e\n\x07\x04\x01\x04\x01\x02\x02\x02\x12\x03p\x1b\x1c\n%\n\x06\x04\
    \x01\x04\x01\x02\x03\x12\x03r\x04\x1d\x1a\x16\x20For\x20repeated\x20fiel\
    ds.\n\n\x0e\n\x07\x04\x01\x04\x01\x02\x03\x01\x12\x03r\x04\x18\n\x0e\n\
    \x07\x04\x01\x04\x01\x02\x03\x02\x12\x03r\x1b\x1c\n\x1e\n\x04\x04\x01\
    \x02\0\x12\x03v\x02\x10\x1a\x11\x20The\x20field\x20type.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03v\x02\x06\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03v\x07\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03v\x0e\x0f\n%\n\x04\
    \x04\x01\x02\x01\x12\x03x\x02\x1e\x1a\x18\x20The\x20field\x20cardinality\
    .\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03x\x02\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03x\x0e\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03x\
    \x1c\x1d\n\x20\n\x04\x04\x01\x02\x02\x12\x03z\x02\x13\x1a\x13\x20The\x20\
    field\x20number.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03z\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03z\x08\x0e\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03z\x11\x12\n\x1e\n\x04\x04\x01\x02\x03\x12\x03|\x02\x12\
    \x1a\x11\x20The\x20field\x20name.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03|\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03|\t\r\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03|\x10\x11\n\x96\x01\n\x04\x04\x01\x02\x04\
    \x12\x03\x7f\x02\x16\x1a\x88\x01\x20The\x20field\x20type\x20URL,\x20with\
    out\x20the\x20scheme,\x20for\x20message\x20or\x20enumeration\n\x20types.\
    \x20Example:\x20`\"type.googleapis.com/google.protobuf.Timestamp\"`.\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03\x7f\t\x11\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\
    \x7f\x14\x15\n\xa5\x01\n\x04\x04\x01\x02\x05\x12\x04\x82\x01\x02\x18\x1a\
    \x96\x01\x20The\x20index\x20of\x20the\x20field\x20type\x20in\x20`Type.on\
    eofs`,\x20for\x20message\x20or\x20enumeration\n\x20types.\x20The\x20firs\
    t\x20type\x20has\x20index\x201;\x20zero\x20means\x20the\x20type\x20is\
    \x20not\x20in\x20the\x20list.\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\
    \x82\x01\x02\x07\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\x82\x01\x08\x13\n\
    \r\n\x05\x04\x01\x02\x05\x03\x12\x04\x82\x01\x16\x17\nF\n\x04\x04\x01\
    \x02\x06\x12\x04\x84\x01\x02\x12\x1a8\x20Whether\x20to\x20use\x20alterna\
    tive\x20packed\x20wire\x20representation.\n\n\r\n\x05\x04\x01\x02\x06\
    \x05\x12\x04\x84\x01\x02\x06\n\r\n\x05\x04\x01\x02\x06\x01\x12\x04\x84\
    \x01\x07\r\n\r\n\x05\x04\x01\x02\x06\x03\x12\x04\x84\x01\x10\x11\n,\n\
    \x04\x04\x01\x02\x07\x12\x04\x86\x01\x02\x1e\x1a\x1e\x20The\x20protocol\
    \x20buffer\x20options.\n\n\r\n\x05\x04\x01\x02\x07\x04\x12\x04\x86\x01\
    \x02\n\n\r\n\x05\x04\x01\x02\x07\x06\x12\x04\x86\x01\x0b\x11\n\r\n\x05\
    \x04\x01\x02\x07\x01\x12\x04\x86\x01\x12\x19\n\r\n\x05\x04\x01\x02\x07\
    \x03\x12\x04\x86\x01\x1c\x1d\n$\n\x04\x04\x01\x02\x08\x12\x04\x88\x01\
    \x02\x18\x1a\x16\x20The\x20field\x20JSON\x20name.\n\n\r\n\x05\x04\x01\
    \x02\x08\x05\x12\x04\x88\x01\x02\x08\n\r\n\x05\x04\x01\x02\x08\x01\x12\
    \x04\x88\x01\t\x12\n\r\n\x05\x04\x01\x02\x08\x03\x12\x04\x88\x01\x15\x17\
    \nX\n\x04\x04\x01\x02\t\x12\x04\x8a\x01\x02\x1c\x1aJ\x20The\x20string\
    \x20value\x20of\x20the\x20default\x20value\x20of\x20this\x20field.\x20Pr\
    oto2\x20syntax\x20only.\n\n\r\n\x05\x04\x01\x02\t\x05\x12\x04\x8a\x01\
    \x02\x08\n\r\n\x05\x04\x01\x02\t\x01\x12\x04\x8a\x01\t\x16\n\r\n\x05\x04\
    \x01\x02\t\x03\x12\x04\x8a\x01\x19\x1b\n%\n\x02\x04\x02\x12\x06\x8e\x01\
    \0\x99\x01\x01\x1a\x17\x20Enum\x20type\x20definition.\n\n\x0b\n\x03\x04\
    \x02\x01\x12\x04\x8e\x01\x08\x0c\n\x1f\n\x04\x04\x02\x02\0\x12\x04\x90\
    \x01\x02\x12\x1a\x11\x20Enum\x20type\x20name.\n\n\r\n\x05\x04\x02\x02\0\
    \x05\x12\x04\x90\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x90\x01\
    \t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x90\x01\x10\x11\n'\n\x04\x04\
    \x02\x02\x01\x12\x04\x92\x01\x02#\x1a\x19\x20Enum\x20value\x20definition\
    s.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x92\x01\x02\n\n\r\n\x05\x04\
    \x02\x02\x01\x06\x12\x04\x92\x01\x0b\x14\n\r\n\x05\x04\x02\x02\x01\x01\
    \x12\x04\x92\x01\x15\x1e\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x92\x01!\
    \"\n(\n\x04\x04\x02\x02\x02\x12\x04\x94\x01\x02\x1e\x1a\x1a\x20Protocol\
    \x20buffer\x20options.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x94\x01\
    \x02\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\x94\x01\x0b\x11\n\r\n\x05\
    \x04\x02\x02\x02\x01\x12\x04\x94\x01\x12\x19\n\r\n\x05\x04\x02\x02\x02\
    \x03\x12\x04\x94\x01\x1c\x1d\n#\n\x04\x04\x02\x02\x03\x12\x04\x96\x01\
    \x02#\x1a\x15\x20The\x20source\x20context.\n\n\r\n\x05\x04\x02\x02\x03\
    \x06\x12\x04\x96\x01\x02\x0f\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\x96\
    \x01\x10\x1e\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x96\x01!\"\n\"\n\x04\
    \x04\x02\x02\x04\x12\x04\x98\x01\x02\x14\x1a\x14\x20The\x20source\x20syn\
    tax.\n\n\r\n\x05\x04\x02\x02\x04\x06\x12\x04\x98\x01\x02\x08\n\r\n\x05\
    \x04\x02\x02\x04\x01\x12\x04\x98\x01\t\x0f\n\r\n\x05\x04\x02\x02\x04\x03\
    \x12\x04\x98\x01\x12\x13\n&\n\x02\x04\x03\x12\x06\x9c\x01\0\xa3\x01\x01\
    \x1a\x18\x20Enum\x20value\x20definition.\n\n\x0b\n\x03\x04\x03\x01\x12\
    \x04\x9c\x01\x08\x11\n\x20\n\x04\x04\x03\x02\0\x12\x04\x9e\x01\x02\x12\
    \x1a\x12\x20Enum\x20value\x20name.\n\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\
    \x9e\x01\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x9e\x01\t\r\n\r\n\
    \x05\x04\x03\x02\0\x03\x12\x04\x9e\x01\x10\x11\n\"\n\x04\x04\x03\x02\x01\
    \x12\x04\xa0\x01\x02\x13\x1a\x14\x20Enum\x20value\x20number.\n\n\r\n\x05\
    \x04\x03\x02\x01\x05\x12\x04\xa0\x01\x02\x07\n\r\n\x05\x04\x03\x02\x01\
    \x01\x12\x04\xa0\x01\x08\x0e\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xa0\
    \x01\x11\x12\n(\n\x04\x04\x03\x02\x02\x12\x04\xa2\x01\x02\x1e\x1a\x1a\
    \x20Protocol\x20buffer\x20options.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\
    \x04\xa2\x01\x02\n\n\r\n\x05\x04\x03\x02\x02\x06\x12\x04\xa2\x01\x0b\x11\
    \n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xa2\x01\x12\x19\n\r\n\x05\x04\x03\
    \x02\x02\x03\x12\x04\xa2\x01\x1c\x1d\ng\n\x02\x04\x04\x12\x06\xa7\x01\0\
    \xb2\x01\x01\x1aY\x20A\x20protocol\x20buffer\x20option,\x20which\x20can\
    \x20be\x20attached\x20to\x20a\x20message,\x20field,\n\x20enumeration,\
    \x20etc.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xa7\x01\x08\x0e\n\xfc\x01\n\
    \x04\x04\x04\x02\0\x12\x04\xac\x01\x02\x12\x1a\xed\x01\x20The\x20option'\
    s\x20name.\x20For\x20protobuf\x20built-in\x20options\x20(options\x20defi\
    ned\x20in\n\x20descriptor.proto),\x20this\x20is\x20the\x20short\x20name.\
    \x20For\x20example,\x20`\"map_entry\"`.\n\x20For\x20custom\x20options,\
    \x20it\x20should\x20be\x20the\x20fully-qualified\x20name.\x20For\x20exam\
    ple,\n\x20`\"google.api.http\"`.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\
    \xac\x01\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xac\x01\t\r\n\r\n\
    \x05\x04\x04\x02\0\x03\x12\x04\xac\x01\x10\x11\n\xa0\x02\n\x04\x04\x04\
    \x02\x01\x12\x04\xb1\x01\x02\x10\x1a\x91\x02\x20The\x20option's\x20value\
    \x20packed\x20in\x20an\x20Any\x20message.\x20If\x20the\x20value\x20is\
    \x20a\x20primitive,\n\x20the\x20corresponding\x20wrapper\x20type\x20defi\
    ned\x20in\x20google/protobuf/wrappers.proto\n\x20should\x20be\x20used.\
    \x20If\x20the\x20value\x20is\x20an\x20enum,\x20it\x20should\x20be\x20sto\
    red\x20as\x20an\x20int32\n\x20value\x20using\x20the\x20google.protobuf.I\
    nt32Value\x20type.\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\xb1\x01\x02\
    \x05\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xb1\x01\x06\x0b\n\r\n\x05\x04\
    \x04\x02\x01\x03\x12\x04\xb1\x01\x0e\x0f\nI\n\x02\x05\0\x12\x06\xb5\x01\
    \0\xba\x01\x01\x1a;\x20The\x20syntax\x20in\x20which\x20a\x20protocol\x20\
    buffer\x20element\x20is\x20defined.\n\n\x0b\n\x03\x05\0\x01\x12\x04\xb5\
    \x01\x05\x0b\n\x20\n\x04\x05\0\x02\0\x12\x04\xb7\x01\x02\x14\x1a\x12\x20\
    Syntax\x20`proto2`.\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\xb7\x01\x02\x0f\
    \n\r\n\x05\x05\0\x02\0\x02\x12\x04\xb7\x01\x12\x13\n\x20\n\x04\x05\0\x02\
    \x01\x12\x04\xb9\x01\x02\x14\x1a\x12\x20Syntax\x20`proto3`.\n\n\r\n\x05\
    \x05\0\x02\x01\x01\x12\x04\xb9\x01\x02\x0f\n\r\n\x05\x05\0\x02\x01\x02\
    \x12\x04\xb9\x01\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: crate::rt::Lazy<crate::descriptor::FileDescriptorProto> = crate::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static crate::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: crate::rt::Lazy<crate::reflect::GeneratedFileDescriptor> = crate::rt::Lazy::new();
    static file_descriptor: crate::rt::Lazy<crate::reflect::FileDescriptor> = crate::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(crate::well_known_types::any::file_descriptor().clone());
            deps.push(crate::well_known_types::source_context::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Type::generated_message_descriptor_data());
            messages.push(Field::generated_message_descriptor_data());
            messages.push(Enum::generated_message_descriptor_data());
            messages.push(EnumValue::generated_message_descriptor_data());
            messages.push(Option::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(Syntax::generated_enum_descriptor_data());
            enums.push(field::Kind::generated_enum_descriptor_data());
            enums.push(field::Cardinality::generated_enum_descriptor_data());
            crate::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        crate::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
