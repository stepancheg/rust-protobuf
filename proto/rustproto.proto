syntax = "proto2";

import "google/protobuf/descriptor.proto";

// see https://github.com/gogo/protobuf/blob/master/gogoproto/gogo.proto
// for the original idea

// Generated files can be customized using this proto
// or using `Customize` struct when codegen is invoked programmatically.

package rustproto;

extend google.protobuf.FileOptions {
    // When true, oneof field is generated public
    optional bool expose_oneof_all = 17001;
    // When true all fields are public, and not accessors generated
    optional bool expose_fields_all = 17003;
    // When false, `get_`, `set_`, `mut_` etc. accessors are not generated
    optional bool generate_accessors_all = 17004;
    // When false, `get_` is not generated even if `syntax = "proto2"`
    optional bool generate_getter_all = 17005;
    // Use `bytes::Bytes` for `bytes` fields
    optional bool carllerche_bytes_for_bytes_all = 17011;
    // Use `bytes::Bytes` for `string` fields
    optional bool carllerche_bytes_for_string_all = 17012;
    // Use `std::Vec` to store repeated messages fields
    optional bool repeated_field_vec_all = 17020;
    // Use `std::Option<std::Box<T>>` to store singular messages fields
    optional bool singular_field_option_box_all = 17024;
    // Use `std::Option<T>` to store singular messages fields.
    // Note, it's not possible to have recursive messages with this option enabled.
    optional bool singular_field_option_all = 17025;

    // Use `serde_derive` to implement `Serialize` and `Deserialize`
    optional bool serde_derive_all = 17030;
    // Guard serde annotations with cfg attr.
    optional string serde_derive_cfg_all = 17031;
    
    // When true, will only generate codes that works with lite runtime.
    optional bool lite_runtime_all = 17035;

    // Use `std::Box<T>` to store oneof message fields.
    // This is useful for mutually recursive messages with oneofs.
    optional bool oneof_field_box_all = 17036;
}

extend google.protobuf.MessageOptions {
    // When true, oneof field is generated public
    optional bool expose_oneof = 17001;
    // When true all fields are public, and not accessors generated
    optional bool expose_fields = 17003;
    // When false, `get_`, `set_`, `mut_` etc. accessors are not generated
    optional bool generate_accessors = 17004;
    // When false, `get_` is not generated even if `syntax = "proto2"`
    optional bool generate_getter = 17005;
    // Use `bytes::Bytes` for `bytes` fields
    optional bool carllerche_bytes_for_bytes = 17011;
    // Use `bytes::Bytes` for `string` fields
    optional bool carllerche_bytes_for_string = 17012;
    // Use `std::Vec` to store repeated messages field
    optional bool repeated_field_vec = 17020;
    // Use `std::Option<std::Box<T>>` to store singular messages fields
    optional bool singular_field_option_box = 17024;
    // Use `std::Option<T>` to store singular messages fields.
    // Note, it's not possible to have recursive messages with this option enabled.
    optional bool singular_field_option = 17025;
    // Use `serde_derive` to implement `Serialize` and `Deserialize`
    optional bool serde_derive = 17030;
    // Guard serde annotations with cfg attr.
    optional string serde_derive_cfg = 17031;

    // Use `std::Box<T>` to store oneof message fields.
    // This is useful for mutually recursive messages with oneofs.
    optional bool oneof_field_box = 17036;
}

extend google.protobuf.FieldOptions {
    // When true all fields are public, and not accessors generated
    optional bool expose_fields_field = 17003;
    // When false, `get_`, `set_`, `mut_` etc. accessors are not generated
    optional bool generate_accessors_field = 17004;
    // When false, `get_` is not generated even if `syntax = "proto2"`
    optional bool generate_getter_field = 17005;
    // Use `bytes::Bytes` for `bytes` fields
    optional bool carllerche_bytes_for_bytes_field = 17011;
    // Use `bytes::Bytes` for `string` fields
    optional bool carllerche_bytes_for_string_field = 17012;
    // Use `std::Vec` to store repeated messages field
    optional bool repeated_field_vec_field = 17020;
    // Use `std::Option<std::Box<T>>` to store singular messages fields
    optional bool singular_field_option_box_field = 17024;
    // Use `std::Option<T>` to store singular messages fields.
    // Note, it's not possible to have recursive messages with this option enabled.
    optional bool singular_field_option_field = 17025;

    // Use `std::Box<T>` to store oneof message fields.
    // This is useful for mutually recursive messages with oneofs.
    optional bool oneof_field_box_field = 17036;
}
